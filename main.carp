(Project.config "title" "dino")
(Project.config "output-directory" "out")
(Project.config "generate-only" true)

(load "lib/tonc.carp")

(deftype PlayerState Running Jumping Falling)
(deftype Player [x Int y Int state PlayerState])
(defmodule Player
 (defn new [] (Player.init 20 100 (PlayerState.Running)))
 (defn height [] 40)
 (defn width [] 20))

(deftype World [p Player])
(defmodule World
 (defn new [] (World.init (Player.new))))

(defn render [world]
  (with Player
    (let-do [player (World.p world)]
     (M3.fill Color.skyblue)
     (M3.rect @(x player)
              @(y player)
              (+ @(x player) (width))
              (+ @(y player) (height))
              Color.cream))))


(defn update-player-position [player]
  (with Key
    (with Player
      (match-ref (state &player)
        PlayerState.Running (if (is-down? A)
                             (set-state player (PlayerState.Jumping))
                             player)
        PlayerState.Jumping (if (>= (y &player) &50)
                             (update-y player &(fn [y] (- y 2)))
                             (set-state player (PlayerState.Falling)))
        PlayerState.Falling (if (>= (y &player) &100)
                             (set-state player (PlayerState.Running))
                             (update-y player &(fn [y] (+ y 2))))))))

(defn update-position [world]
  (World.update-p world &update-player-position))

(defn update [world]
  (=> world
    (update-position)))

(defn main []
 (do
  (Rand.set-seed 42)
  (Display.set-control (bit-or Display.mode3 Display.background2))
  (let-do [world (World.new)]
    (while-do true
     (Key.poll)
     (set! world (update world))
     (Video.vsync)
     (render &world)))))

