(use-all Object Assets Debug)

(defn make-box []
  (init (bit-or attr0-square attr0-8bpp)
        attr1-size-16
        (attr2-build (box-id) (pal-id) 0)))

(defn make-unicorn [frame]
  (init (bit-or attr0-tall attr0-8bpp)
        attr1-size-16-32
        (case frame
         0 (attr2-build (unicorn-id) (pal-id) 0)
         1 (attr2-build (+ (unicorn-id) 16) (pal-id) 0)
         2 (attr2-build (+ (unicorn-id) 32) (pal-id) 0)
         (halt "There isn't a frame for this"))))

(defn render-obstacles [obstacles]
  (foreach [obstacle obstacles]
   (with Obstacle
    (when (< @(x obstacle) (- Video.screen-width (width)))
      (buffer-push (set-pos (make-box) @(x obstacle) (y)))))))

(defn render-player [player]
  (with Player
   (do
    (buffer-push
      (set-pos (match-ref (state player)
                  PlayerState.Jumping (make-unicorn 2)
                  (PlayerState.Running tik) (if (>= tik &15) (make-unicorn 1) (make-unicorn 0))
                  _                   (make-unicorn 0))
               @(x player)
               @(y player))))))

(defn-do render-background [world]
  (Background.control-x-offset (Background.Zero) @(World.back-zero-x world))
  (Background.control-x-offset (Background.One) @(World.back-one-x world)))

(defn render-playing-game [world]
  (do
   (render-background world)
   (render-obstacles (World.obstacles world))
   (render-player (World.p world))))

(defn render-paused-game [world]
  (do
   (render-playing-game world)
   (buffer-push (set-pos (make-box) 114 0))))

(defn render-start-screen []
  (do 
   (buffer-push (set-pos (make-box) 0 0))))

(defn render-death-screen []
  (do
   (buffer-push (set-pos (make-box) 224 0))))

(sig render (Fn [(Ref World)] ()))
(defn render [world]
  (do
    (match-ref (World.state world)
      WorldState.Playing (render-playing-game world)
      WorldState.Paused (render-paused-game world)
      WorldState.Intro (render-start-screen)
      WorldState.Dead (render-death-screen))
    (Object.buffer-blit)))
