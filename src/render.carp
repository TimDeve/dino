(defn render-obstacles [obstacles]
  (foreach [obstacle obstacles]
   (with Obstacle
    (when (< @(x obstacle) (- Video.screen-width (width)))
      (M3.rect @(x obstacle)
               (- @&floor-y (height))
               (+ @(x obstacle) (width))
               @&floor-y
               @(color obstacle))))))

(defn render-player [player]
  (with Player
   (M3.rect @(x player)
            @(y player)
            (+ @(x player) (width))
            (+ @(y player) (height))
            Color.cream)))

(defn render-playing-game [world]
  (do
   (M3.fill Color.skyblue)
   (render-obstacles (World.obstacles world))
   (render-player (World.p world))))

(defn render-paused-game [world]
  (do
   (render-playing-game world)
   (M3.rect 40 40 200 120 Color.yellow)))

(defn render-start-screen []
  (do
   (M3.fill Color.skyblue)
   (M3.rect 40 40 200 120 Color.lime)))

(defn render-death-screen []
  (do
   (M3.fill Color.skyblue)
   (M3.rect 40 40 200 120 Color.red)))

(sig render (Fn [(Ref World)] ()))
(defn render [world]
  (match-ref (World.state world)
    WorldState.Playing (render-playing-game world)
    WorldState.Paused (render-paused-game world)
    WorldState.Intro (render-start-screen)
    WorldState.Dead (render-death-screen)))
