(use Object)
(defn make-box []
  (init attr0-square
        attr1-size-16
        (attr2-build 0 0 0)))

(defn render-obstacles [obstacles]
  (foreach [obstacle obstacles]
   (with Obstacle
    (when (< @(x obstacle) (- Video.screen-width (width)))
      (buffer-push (set-pos (make-box) @(x obstacle) (- @&floor-y (height))))))))

(defn render-player [player]
  (with Player
   (do
    (buffer-push (set-pos (make-box) @(x player) @(y player)))
    (buffer-push (set-pos (make-box) @(x player) (+ 16 @(y player)))))))

(defn render-playing-game [world]
  (do
   (render-obstacles (World.obstacles world))
   (render-player (World.p world))))

(defn render-paused-game [world]
  (do
   (render-playing-game world)
   (buffer-push (set-pos (make-box) 114 0))))

(defn render-start-screen []
  (do 
   (buffer-push (set-pos (make-box) 0 0))))

(defn render-death-screen []
  (do
   (buffer-push (set-pos (make-box) 224 0))))

(sig render (Fn [(Ref World)] ()))
(defn render [world]
  (do
    (match-ref (World.state world)
      WorldState.Playing (render-playing-game world)
      WorldState.Paused (render-paused-game world)
      WorldState.Intro (render-start-screen)
      WorldState.Dead (render-death-screen))
    (Object.buffer-blit)))
