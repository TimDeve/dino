(use-all Object Assets Debug)

(defn make-bin []
  (init (bit-or attr0-square attr0-8bpp)
        attr1-size-16
        (attr2-build (bin-id) (pal-id) 0)))

(defn make-witch []
  (init (bit-or attr0-square attr0-8bpp)
        attr1-size-16
        (attr2-build (witch-id) (pal-id) 0)))

(defn make-unicorn [frame]
  (init (bit-or attr0-tall attr0-8bpp)
        attr1-size-16-32
        (case frame
         0 (attr2-build (unicorn-id) (pal-id) 0)
         1 (attr2-build (+ (unicorn-id) 16) (pal-id) 0)
         2 (attr2-build (+ (unicorn-id) 32) (pal-id) 0)
         3 (attr2-build (+ (unicorn-id) 48) (pal-id) 0)
         (halt "There isn't a frame for this"))))

(defn make-obs [obs]
  (match-ref (Obstacle.ty obs)
    (ObstacleType.Low) (make-bin)
    (ObstacleType.High) (make-witch)))

(defn render-obstacles [obstacles]
  (foreach [obstacle obstacles]
   (with Obstacle
    (when (< @(x obstacle) (+ Video.screen-width (width)))
      (buffer-push (set-pos (make-obs obstacle) @(x obstacle) (y obstacle)))))))

(defn offset [world]
  (match-ref (World.state world)
    (WorldState.Intro tik) @tik
    _                      0))

(defn render-player [world]
  (with Player
   (let [player (World.p world)]
    (buffer-push
      (set-pos (match-ref (state player)
                  PlayerState.Jumping (make-unicorn 2)
                  PlayerState.Dodging (make-unicorn 3)
                  (PlayerState.Running tik) (if (>= tik &15) (make-unicorn 0) (make-unicorn 1))
                  _                   (make-unicorn 0))
               @(x player)
               (- @(y player) (offset world)))))))

(defn-do render-background [world]
  (match-ref (World.state world)
    (WorldState.Start _)
    (do
      (Background.control-offset (Background.Zero) @(World.back-zero-x world) -95)
      (Background.control-offset (Background.One) @(World.back-one-x world) -95)
      (Background.control-offset (Background.Two) 0 -110))
    (WorldState.Intro tik)
    (do
      (Background.control-offset (Background.Zero) @(World.back-zero-x world) (if (< tik &-95) -95 @tik))
      (Background.control-offset (Background.One) @(World.back-one-x world) (if (< tik &-95) -95 @tik))
      (Background.control-offset (Background.Two) 0 @tik))
    _
    (do
      (Background.control-offset (Background.Zero) @(World.back-zero-x world) 0)
      (Background.control-offset (Background.One) @(World.back-one-x world) 0)
      (Background.control-offset (Background.Two) 0 0))))

(defn-do render-score [world]
  (Text.set-pos 0 0)
  (Text.erase-line)
  (ignore (Text.write-fmt "Score:%i" (World.score world))))

(defn render-playing-game [world]
  (do
   (render-score world)
   (render-obstacles (World.obstacles world))
   (render-player world)))

(defn-do render-paused-game [world]
  (render-playing-game world)
  (Text.set-pos 100 0)
  (ignore (Text.write "Paused")))

(defn-do render-start-screen []
  (Text.erase-line))

(defn-do render-death-screen []
  (Text.set-pos 70 0)
  (ignore (Text.write "Start to try again.")))

(sig render (Fn [(Ref World)] ()))
(defn render [world]
  (do
    (render-background world)
    (match-ref (World.state world)
      WorldState.Playing   (render-playing-game world)
      WorldState.Paused    (render-paused-game world)
      (WorldState.Start _) (render-start-screen)
      WorldState.Dead      (render-death-screen)
      (WorldState.Intro _) (render-playing-game world)
      _                    (Debug.halt "Unhandled match"))
    (Object.buffer-blit)))
