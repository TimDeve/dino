(load "../lib/key.carp")
(load "../lib/video.carp")
(load "../lib/rand.carp")

(load "./collisions.carp")
(load "./models.carp")
(load "./jump.carp")

(defn jump-button? []
 (with Key
  (or (is-down? A) (is-down? Up))))

(defn update-player-position [player]
  (with Key
    (with Player
      (match-ref (state &player)
        PlayerState.Jumping (update-y player &(fn [y] (jump-jumping y)))
        PlayerState.Falling (update-y player &(fn [y] (jump-falling y)))
        _                   player))))

(defn update-player-state [player]
  (with Key
    (with Player
      (match-ref (state &player)
        (PlayerState.Running _) (if (jump-button?)
                                  (set-state player (PlayerState.Jumping))
                                  (if (is-down? Down)
                                    (set-state player (PlayerState.Dodging))
                                    (tick player)))
        PlayerState.Jumping     (if (or (<= (y &player) &45)
                                        (and (<= (y &player) &53) (not (jump-button?))))
                                  (set-state player (PlayerState.Falling))
                                  player)
        PlayerState.Falling     (if (>= (y &player) &88)
                                  (set-state player (PlayerState.Running 1))
                                  player)
        PlayerState.Dodging     (if (is-down? Down)
                                  (set-state player (PlayerState.Dodging))
                                  (set-state player (PlayerState.Running 0)))))))

(defn furthest-obstacle [obs]
  (Array.reduce
    &(fn [acc ob]
      (if (>= (Obstacle.x ob) &acc)
          @(Obstacle.x ob)
          acc))
    0
    obs))

(defn too-close-to-other-obstacle? [new-pos furthest-x]
  (or (and (<= new-pos furthest-x) (>= @new-pos (- @furthest-x 110)))
      (and (>= new-pos furthest-x) (<= @new-pos (+ @furthest-x 110)))))

(defn random-reset-position [furthest-x]
  (let [new-pos (+ (Rand.range 0 120) Video.screen-width)]
    (if (too-close-to-other-obstacle? &new-pos furthest-x)
      (+ @furthest-x (Rand.range 130 400))
      new-pos)))

(defn update-obstacle-position [obs furthest-x]
  (Obstacle.init
    (if (<= (Obstacle.x &obs) &-16)
     (random-reset-position furthest-x)
     (- @(Obstacle.x &obs) 3))
    @(Obstacle.passed &obs)
    (if (<= (Obstacle.x &obs) &-16)
     (if (= 0 (Rand.range 0 5)) (ObstacleType.High) (ObstacleType.Low))
     @(Obstacle.ty &obs))))

(defn update-obstacles-position [obstacles]
  (let [furthest-x (furthest-obstacle &obstacles)]
    (Array.endo-map
     &(fn [obs] (update-obstacle-position obs &furthest-x))
     obstacles)))

(defn update-position [world]
  (match-ref (World.state &world)
    WorldState.Playing
    (=> world
        (World.update-p &update-player-position)
        (World.update-obstacles &update-obstacles-position))

    _ world))

(defn update-world-state [world]
  (=> world
    (World.tick)
    ((fn [wrld]
      (if (Key.hit? Key.Start)
          (match-ref (World.state &wrld)
             WorldState.Playing       (World.set-state wrld (WorldState.Paused))
             (WorldState.Start tik)   (do (Rand.set-seed @tik) (World.start wrld))
             WorldState.Paused        (World.set-state wrld (WorldState.Playing))
             _                        wrld)

          (match-ref (World.state &wrld)
             (WorldState.Intro tik)   (if (>= tik &0) (World.set-state wrld (WorldState.Playing)) wrld)
             (WorldState.Outro tik)   (if (<= tik &-110) (World.set-state wrld (WorldState.new-start)) wrld)
             _                        wrld))))))

(defn check-for-collisions [world]
  (let [world* &world]
   (World.update-state world
    &(fn [state]
      (if (Array.any?
           &(fn [obs] (rect-colliding? (World.p world*)
                                       obs))
           (World.obstacles world*))
        (WorldState.new-outro)
        (WorldState.Playing))))))

(defn obs-past-player [obs] (< (Obstacle.x obs) &8))

(defn mark-obstacles-as-passed [obstacles]
  (Array.endo-map
    &(fn [obs]
      (let [past (obs-past-player &obs)]
        (Obstacle.set-passed obs past)))
    obstacles))

(defn score-from-obstacle [obs]
 (if @(Obstacle.passed obs)
  0
  (if (obs-past-player obs) 1 0)))

(defn calculate-score [world]
  (let [new-score
        (Array.reduce &(fn [acc obs] (+ acc (score-from-obstacle obs)))
                      @(World.score &world)
                      (World.obstacles &world))]
    (=> world
      (World.set-score new-score)
      (World.update-obstacles &(fn [obstacles] (mark-obstacles-as-passed obstacles))))))

(defn update-backgrounds [world]
  (match-ref (World.state &world)
     (WorldState.Paused) world
     _                  (=> world
                         (World.update-back-zero-x &(fn [x] (inc x)))
                         (World.update-back-one-x  &(fn [x] (+ x 3))))))

(defn update-state-if-playing [world]
  (match-ref (World.state &world)
     WorldState.Playing
     (=> world
         (calculate-score)
         (World.update-p &update-player-state)
         (check-for-collisions))
     _ world))

(defn update-state [world]
  (=> world
      (update-world-state)
      (update-backgrounds)
      (update-state-if-playing)))

(sig update (Fn [World] World))
(defn update [world]
  (=> world
    (update-position)
    (update-state)))

