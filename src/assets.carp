(use ToncUtils)

(defmodule Assets
  (relative-include "../built-assets/backsky.h")
  (register backsky-tiles (Ptr ()) "backskyTiles")
  (register backsky-tiles-len Int "backskyTilesLen")
  (register backsky-map (Ptr ()) "backskyMap")
  (register backsky-map-len Int "backskyMapLen")

  (relative-include "../built-assets/backcity.h")
  (register backcity-tiles (Ptr ()) "backcityTiles")
  (register backcity-tiles-len Int "backcityTilesLen")
  (register backcity-map (Ptr ()) "backcityMap")
  (register backcity-map-len Int "backcityMapLen")

  (relative-include "../built-assets/backearth.h")
  (register backearth-tiles (Ptr ()) "backearthTiles")
  (register backearth-tiles-len Int "backearthTilesLen")
  (register backearth-map (Ptr ()) "backearthMap")
  (register backearth-map-len Int "backearthMapLen")

  (relative-include "../built-assets/pal.h")
  (register pal (Ptr ()) "palPal")
  (register pal-len Int "palPalLen")

  (relative-include "../built-assets/bin.h")
  (register bin-tiles (Ptr ()) "binTiles")
  (register bin-tiles-len Int "binTilesLen")

  (relative-include "../built-assets/witch.h")
  (register witch-tiles (Ptr ()) "witchTiles")
  (register witch-tiles-len Int "witchTilesLen")

  (relative-include "../built-assets/unicorn.h")
  (register unicorn-tiles (Ptr ()) "unicornTiles")
  (register unicorn-tiles-len Int "unicornTilesLen")

  (inline-defn bin-id [] 0)
  (inline-defn witch-id [] 9)
  (inline-defn unicorn-id [] 17)
  (inline-defn pal-id [] 0)

  (inline-defn city-cbb [] 2)
  (inline-defn city-sbb [] 31)

  (inline-defn earth-cbb [] 1)
  (inline-defn earth-sbb [] 30)

  (inline-defn sky-cbb [] 0)
  (inline-defn sky-sbb [] 29)

  (defn setup-backgrounds []
    (with Background
     (do
      (control (Zero) (bit-or* (cbb (city-cbb)) (sbb (city-sbb)) bg-8bpp bg-32-32 (priority 0)))
      (control (One)  (bit-or* (cbb (earth-cbb)) (sbb (earth-sbb)) bg-8bpp bg-32-32 (priority 1)))
      (control (Two)  (bit-or* (cbb (sky-cbb)) (sbb (sky-sbb)) bg-8bpp bg-32-32 (priority 2))))))

  (defn-do memcopy []
    (memcpy (Object.ovram (bin-id)) bin-tiles bin-tiles-len)
    (memcpy (Object.ovram (witch-id)) witch-tiles witch-tiles-len)
    (memcpy (Object.ovram (unicorn-id)) unicorn-tiles unicorn-tiles-len)
    (memcpy Object.pal-mem pal pal-len)

    (memcpy (Background.cbb-mem (sky-cbb)) backsky-tiles backsky-tiles-len)
    (memcpy (Background.sbb-mem (sky-sbb)) backsky-map backsky-map-len)

    (memcpy (Background.cbb-mem (earth-cbb)) backearth-tiles backearth-tiles-len)
    (memcpy (Background.sbb-mem (earth-sbb)) backearth-map backearth-map-len)

    (memcpy (Background.cbb-mem (city-cbb)) backcity-tiles backcity-tiles-len)
    (memcpy (Background.sbb-mem (city-sbb)) backcity-map backcity-map-len)

    (memcpy Background.pal-mem pal pal-len))

  (defn-do init []
    (memcopy)
    (setup-backgrounds)))

