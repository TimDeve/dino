(def floor-y 120)

(deftype ObstacleType
  Low
  High)

(use ObstacleType)

(deftype Obstacle [x Int passed Bool ty ObstacleType])
(defmodule Obstacle
 (defn height [] 16)
 (defn width [] 16)
 (defn y [obs]
  (match-ref (ty obs)
    Low (- floor-y (height))
    High (- floor-y (+ (height) (height)))))

 (defn hitbox-x-pos [obs] @(x obs))
 (implements x-pos Obstacle.hitbox-x-pos)
 (sig hitbox-y-pos (Fn [(Ref Obstacle)] Int))
 (defn hitbox-y-pos [obs] (y obs))
 (implements y-pos Obstacle.hitbox-y-pos)
 (sig hitbox-width (Fn [(Ref Obstacle)] Int))
 (defn hitbox-width [obs] (width))
 (implements rect-width Obstacle.hitbox-width)
 (sig hitbox-height (Fn [(Ref Obstacle)] Int))
 (defn hitbox-height [obs] (height))
 (implements rect-height Obstacle.hitbox-height))

(deftype PlayerState (Running [Int]) Jumping Falling Dodging)
(deftype Player [x Int y Int state PlayerState])
(defmodule Player
 (defn height [] 32)
 (defn width [] 16)
 (defn new [] (Player.init 20 (- @&floor-y (height)) (PlayerState.Running 1)))

 (defn tick [player]
  (update-state player &(fn [state]
                         (match state
                           (PlayerState.Running tik)
                           (PlayerState.Running (if (>= tik 30) 1 (inc tik)))
                           _             state))))

 (defn hitbox-x-pos [player] @(x player))
 (implements x-pos Player.hitbox-x-pos)
 (defn hitbox-y-pos [player]
  (match-ref (state player)
    PlayerState.Dodging (+ @(y player) 16)
    _                    @(y player)))

 (implements y-pos Player.hitbox-y-pos)
 (sig hitbox-width (Fn [(Ref Player)] Int))
 (defn hitbox-width [player] (width))
 (implements rect-width Player.hitbox-width)
 (sig hitbox-height (Fn [(Ref Player)] Int))
 (defn hitbox-height [player]
  (match-ref (state player)
    PlayerState.Dodging (- (height) 16)
    _                    (height)))
 (implements rect-height Player.hitbox-height))

(deftype Speed One Two Three Four)

(deftype WorldState (Start [Int]) (Intro [Int]) Playing Paused (Outro [Int]))
(defmodule WorldState
 (defn new-intro [] (Intro -110))
 (defn new-outro [] (Outro 0))
 (defn new-start [] (Start 0)))

(deftype World [p Player
                obstacles (Array Obstacle)
                state WorldState
                score Int
                speed Speed
                back-zero-x Int
                back-one-x Int])

(defmodule World
 (defn tick [world]
  (update-state world
                &(fn [state]
                  (match state
                    (WorldState.Start tik) (WorldState.Start (inc tik))
                    (WorldState.Intro tik) (WorldState.Intro (+ tik 2))
                    (WorldState.Outro tik) (WorldState.Outro (- tik 4))
                    _                      state))))

 (defn new []
  (World.init (Player.new)
              [(Obstacle.init 600 false (Low))
               (Obstacle.init (+ 600 240) false (Low))]
              (WorldState.new-start)
              0
              (Speed.One)
              0
              0))

 (defn start [world]
  (=> (new)
      (set-state (WorldState.new-intro))
      (set-back-zero-x @(back-zero-x &world))
      (set-back-one-x @(back-one-x &world)))))

