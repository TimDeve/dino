(def floor-y 120)

(deftype Obstacle [x Int color Color])
(defmodule Obstacle
 (defn height [] 16)
 (annotate height "inline")
 (defn width [] 16)
 (annotate width "inline")
 (defn y [] (- floor-y (height)))
 (annotate y "inline")

 (defn hitbox-x-pos [obs] @(x obs))
 (implements x-pos Obstacle.hitbox-x-pos)
 (sig hitbox-y-pos (Fn [(Ref Obstacle)] Int))
 (defn hitbox-y-pos [obs] (y))
 (implements y-pos Obstacle.hitbox-y-pos)
 (sig hitbox-width (Fn [(Ref Obstacle)] Int))
 (defn hitbox-width [obs] (width))
 (implements rect-width Obstacle.hitbox-width)
 (sig hitbox-height (Fn [(Ref Obstacle)] Int))
 (defn hitbox-height [obs] (height))
 (implements rect-height Obstacle.hitbox-height))

(deftype PlayerState Running Jumping Falling)
(deftype Player [x Int y Int state PlayerState])
(defmodule Player
 (defn height [] 32)
 (annotate height "inline")
 (defn width [] 16)
 (annotate width "inline")
 (defn new [] (Player.init 20 (- @&floor-y (height)) (PlayerState.Running)))

 (defn hitbox-x-pos [player] @(x player))
 (implements x-pos Player.hitbox-x-pos)
 (defn hitbox-y-pos [player] @(y player))
 (implements y-pos Player.hitbox-y-pos)
 (sig hitbox-width (Fn [(Ref Player)] Int))
 (defn hitbox-width [player] (width))
 (implements rect-width Player.hitbox-width)
 (sig hitbox-height (Fn [(Ref Player)] Int))
 (defn hitbox-height [player] (height))
 (implements rect-height Player.hitbox-height))

(deftype WorldState Intro Playing Paused Dead)
(deftype World [p Player
                obstacles (Array Obstacle)
                state WorldState
                back-zero-x Int
                back-one-x Int])
(defmodule World
 (defn new []
  (World.init (Player.new)
              [(Obstacle.init Video.screen-width Color.dead)
               (Obstacle.init (+ Video.screen-width 140) Color.magenta)]
              (WorldState.Intro)
              0
              0)))

