(load "./types.carp")
(load "./utils.carp")

(use ToncUtils)

(deftype Background
  Zero
  One
  Two
  Three)

(defmodule Background
  (register zero-x-control-ptr (Ptr Vu16) "(&REG_BG0HOFS)")
  (register zero-y-control-ptr (Ptr Vu16) "(&REG_BG0VOFS)")
  (register one-x-control-ptr  (Ptr Vu16) "(&REG_BG1HOFS)")
  (register one-y-control-ptr  (Ptr Vu16) "(&REG_BG1VOFS)")
  (register two-x-control-ptr  (Ptr Vu16) "(&REG_BG2HOFS)")
  (register two-y-control-ptr  (Ptr Vu16) "(&REG_BG2VOFS)")

  (defn control-offset [bg x y]
    (match bg
      Zero (do
            (unsafe-set zero-x-control-ptr x)
            (unsafe-set zero-y-control-ptr y))
      One  (do
            (unsafe-set one-x-control-ptr x)
            (unsafe-set one-y-control-ptr y))
      Two  (do
            (unsafe-set two-x-control-ptr x)
            (unsafe-set two-y-control-ptr y))
      _    (Debug.halt "Unhandled match case")))


  (defn control-y-offset [bg y]
    (match bg
      Zero (unsafe-set zero-y-control-ptr y)
      One  (unsafe-set one-y-control-ptr y)
      Two  (unsafe-set two-y-control-ptr y)))

  (defn control-x-offset [bg x]
    (match bg
      Zero (unsafe-set zero-x-control-ptr x)
      One  (unsafe-set one-x-control-ptr x)
      Two  (unsafe-set two-x-control-ptr x)
      _    (Debug.halt "Unhandled match case")))

  (register zero-control-ptr (Ptr Vu16) "(&REG_BG0CNT)")
  (register one-control-ptr  (Ptr Vu16) "(&REG_BG1CNT)")
  (register two-control-ptr  (Ptr Vu16) "(&REG_BG2CNT)")
  (defn control [bg val]
    (match bg
     Zero (unsafe-set zero-control-ptr val)
     One  (unsafe-set one-control-ptr val)
     Two  (unsafe-set two-control-ptr val)
     _    (Debug.halt "Unhandled match case")))

  (register priority (Fn [Int] Uint16) "BG_PRIO")
  (register cbb (Fn [Int] Uint16) "BG_CBB")
  (register sbb (Fn [Int] Uint16) "BG_SBB")
  (register bg-4bpp Uint16 "BG_4BPP")
  (register bg-8bpp Uint16 "BG_8BPP")
  (register bg-32-32 Uint16 "BG_REG_32x32")
  (register bg-64-32 Uint16 "BG_REG_64x32")

  (deftemplate cbb-mem (Fn [Int] (Ptr ()))
                       "inline void* $NAME(int background_id)"
                       "$DECL {
                         return &tile_mem[background_id][0];
                       }")

  (deftemplate sbb-mem (Fn [Int] (Ptr ()))
                       "inline void* $NAME(int map_index)"
                       "$DECL {
                         return &se_mem[map_index][0];
                       }")

  (register pal-mem (Ptr ()) "pal_bg_mem"))

